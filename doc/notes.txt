sucle is not a minecraft clone.
sucle is not an unreal engine clone.
sucle does not seek to rival emacs.

sucle is not for data visualization, such as d3.js
sucle is not for looking at memes.

sucle is:
- simple
- jump around in an infinite block world inspired by:
-- himno
-- super mario maker

it should be simple voxels, but like walking around in a dream.

TODO:
consolidate
- lem-opengl impl + ncurses-clone into sucle
- mesh to either display lists or vaos -> a number is a display list, an object is a vao[DONE]

TODO:
remove all '::'? so all packages export correctly?

TODO:
put all of glhelp in one file?[DONE]

TODO:
- logger
- documentation generation
- web presence, http, server
- update testbed, change-world, text-subsystem to use glhelp:create-vao-or-display-list-from-specs,
compress even further with scratch-buffer:flush-my-iterator and scratch-buffer:bind-in* [DON E]

TODO:
- replace nsb-cga and cameera-matrix with 3d-vectors and 3d-matrics.
  - mfiano/origin is not portable
  - rtg-math has too many packages, and missing some functions
  - 3d-vectors and 3d-matrics have consing and non-consing versions
- merge window and window-opengl-glfw
- write a test case for every single system, along with an explanation
- refactor physics engine

TODO:
- runtime dependencies of glfw-bodge blob[DONE]
- let binaries go in the temp directory?

TODO:
- separate out opengl state changes and batch events. The chunk manager needs to have knowledge
of opengl in order to clean up old meshes.

TODO:
- sucle.lisp, change-world.lisp, and world.lisp all contain code for saving and loading the world. 

TODO:
- refactor physics engine into managable state, have multiple aabbs and intersections. spatial hashmap lke the voxel one? loose grid?
- bring ncurses-clone over from lem-opengl and use it here
- exhaustively write tests and documentation
- replace nsb-cga and camera-matrix with 3d-vectors [CANCELLED]
- refactor input, use event system? ECS? keymap?

other:
- frustum culling aabbs?
- query object culling for everything?

TODO: Whats most important?
- Real users?
- well documented code with tests?

- opengl state manager, push and pop state, so don't have to keep track of the state machine.
- refactor deflazy to be like facebook's react?

TODO:
- bring in ncurses-clone over from lem-opengl
- write documentation and tests

TODO:
- fork lem for quicklisp/ultralisp

TODO:
- Find all "FIXME\:\:"s and replace with something else, the "::"s get in the
way of package references.[DONE]
- Revive pprint-presentations and use it as a GUI?
- Revive 2d pix grid? Combine with ncurses-for-lem?
- Revive skybox?
- Revivie basic, 3bst, mouse-pointer, skybox, cartesian-graphing,
- Dont't revive sucle-sketch, or sucle-vecto?
- Revive a-sound-system, factor out openal + sndfile and remove ffmpeg??
- Factor out shadowroot cl-c-parse
- Revive sockets-test?
- Is "reviving" or saving old code a good idea?

Project goals:
- Portable, pure Common Lisp, with few dependencies:
 - Common Lisp
 - CFFI
 - OpenGL
 - GLFW3
- Paredit
- SLIME/swank
- Commmon Lisp REPL
- Text editor
- Common Lisp code editor
- Easy install -> quicklisp [ultralisp? trivial-ship?]

TODO:
- Fix packaging for: voxel-chunks, world, glhelp, aabbcc, sucle-mp, utility, text-sub, ncurses-clone, [DONE]
- Just sucle-mp, glhelp, and ncurses-clone-lem-view? aabbcc, world, voxel-chunks are all linked together? [CANCELLED]

- use import-from for split-sequence, struct-to-clos:struct->class, utility, and alexandria

TODO:
- add frustum culling, for chunks
- use objects for blocks, not numbers

TODO:
- Text menu
- lem-opengl, minilem integration
- tutorial and videos, youtube


TODO:
- simple persistent hash table? 4k chunks?


n bytes -> 4k 2^12 chunks?
1 byte
2^1 byte 2
2^2 4
2^3 8 byte 
2^4 16
2^5 32
2^6 64
2^7 128 -> smallest chunks
2^8
2^9
2^10

Add versioning?

1 000 000 000 000 bytes in terabyte
1 000 000 times that 1 000 000 000 000 000 000
(log (expt 10 18) 2) -> 2^59.794704 bytes
2^63.794704 bits

- lock file to prevent others from accessing database
- data file with a folder and each file is numbered 1 -> upper limit ~ 64 2^number byte blocks

A game that's just a bunch of colored rectangles
- I'm not an artist
- Or a storyteller

TODO:
- colorful world
- infinite, dense, sparse, lighthearted, dark
- billboarded images
-- memes, wojak
-- gui
- pick which world to load
- it doesn't have to be pure common lisp
- items
- inventory
- health
- particle effects
- skinning animation
- lem integration: minilem
- aabb frustum culling, 'weeping angel' type mechanic
- all sorts of materials: water, sand, metal, green painted metal, brick, pipes

FIXME::loading the wrong world, still some sucle-multiprocessing threads going on
FIXME::fix lem-opengl and ncurses-clone-for-lem so that it can be repositioned
FIXME::deflazy forces singletons. This is bad?

FIXME::better deflazy:
- non-singletons
- update definitions from the editor
- default dependencies, dependency swapping

- named dependencies, for dependency swapping
- phase out deflazy? and getfnc? and others?

global variables essentially

;;For deflazy, it defines a default node. But other nodes can be created
;;Like javascript React? does it have a default node?

;;Only the deflazy singleton is interactive

;;technical debt -> deflazy -> text-subsystem -> ncurses-clone-for-lem -> lem
;;deflazy interactive is only useful for prototyping and doesn't scale.
;;opengl, interactivity, simplicity, efficiency. Can't have it all

;;[FIXME] lem errors when resizing the window
;;[TODO]:create a menu, now that text can be better drawn to the screen
;;inventory finally?
;;q- quit
;;b- back
;;h- help
;;n- next
;;p- previous

;;web-browser like?
;;[FIXME]::Resizing after a while with the new 'port' causes a memory error. why?
;;level select
;;render flat images
;;memory error? because I pkilled sbcl? or opengl not being cleaned up correctly?
;;Deflazy fixme::when redefining deflazy with more or less arguments, creates errors
;;FIXME:have different character width and height for text-subsystem and ncurses-clone
;;Open Sucle with a menu instead of black screen

;;combine lem, sucle, and menu system under one roof?
;;separate menu, application per-frame controller
;;cl-steamworks?
;;lem-lisp-mode has a *wait-message-thread* -> does this cause the game to stall?
;;grep -r "\-thread\*"

;;double jump
;;wacky world generation
;;minecraft integration?
;;sqlite database for storing objects
;;Use a logging facility?

world generation
- terrain
physics
- multiple things moving about
fancier graphics

why am I so against using existing libraries?
;;die if I fall too far
;;use clos for objects and inheritance instead of structs?
;;clean up sucle::physics
;;frustum culling, so chunks don't flicker in and out of existence
;;when turning the camera
;;mario like-thwomp
;;double jump, dash, ledge grab, hat in time celeste
;;shell, button, kick, stomp
;;wind? spikes? heat? metal balls? springs?
;;spritesheet, not necessarily a square grid of squares?
;;The third person?
;;minecraft colored-wool like blocks -> dokucraft grass?

;;currently each chunk is an array of element type t.
;;thats 64 bits on x64 machines, 32 bits on others.
;;maybe special types can be special-cased. or is this a
premature optimization?

#( 16-bit data ...)
16 * 16 * 16 ->12 bits 4 bit type
;;punching block hardness?
;;your head should be spinning, you should feel very small.

frustum culling
- update camera view planes
;;too many side effects in sucle main loop
;;make sure all lisp objects can be used functionally?
[TODO] optimization -> don't frustum check each chunk, do it in columns.

;;database multiple worlds
;;chunk manager
;;chunk cursors -> chunk array?

;;menu
;;startup

;;new asdf system -> crud
;;- database
;;- sucle-serialize
;;used emacs-narrow-to-region

centralized place for info on each of the chunks
- pinned by which cursors/chunk-arrays -> list of cursors
- last accessed at -> for mru cache
- current tasks being executed for the chunk
-- being loaded
-- being saved

;;TODO:add have CRUD use a write-oneread-many mutex. Make the mutex using locks?


- chunk-cursor
- draw things 
- sucle on steam?
