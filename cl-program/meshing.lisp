(in-package :sandbox)

(defmacro deach (func-or-macro &rest forms)
  (cons 'progn
	(mapcar (lambda (x) (list func-or-macro x)) forms)))

(defparameter susie (flhat:make-flhat))
(defun reset-susie ()
  (setf susie (flhat:make-flhat)))

(defparameter george (flhat:make-flhat))
(defparameter pauline (flhat:make-flhat))

(defun test6 (times)
  (declare (optimize (speed 3) (safety 0)))
  (let ((spine (flhat:make-flhat-iterator susie)))
    (declare (type iter-ator:iter-ator spine))
    (dotimes (x 1 (flhat:iterator-position spine))
      (flhat:reset-iterator spine)
      (iateor:wasabios ((next spine))
	(dotimes (x times)
	  (next x))))))

(defun test69 ()
  (declare (optimize (speed 3) (safety 0)))
  (let ((spine (flhat:make-flhat-iterator susie))
	(spine2 (flhat:make-flhat-iterator george))
	(spine3 (flhat:make-flhat-iterator pauline)))
    (declare (type iter-ator:iter-ator spine spine2 spine3))
    (dotimes (x 25)
      (deach flhat:reset-iterator spine spine2 spine3)
      (iateor:wasabios ((emit spine)
			(emit2 spine2)
			(emit3 spine3))
	(dotimes (x (floor (expt 10 7) 3))
	  (emit x)
	  (emit2 x)
	  (emit3 x))))))
