(in-package :sandbox)

(defmacro with-simply-bound-iterator ((next place iterator) &body body)
  (let ((array (gensym))
	(index (gensym)))
    `(iter-ator:with-bound-iterator (,next ,place (,array) (,index)) ,iterator
       ,@body)))

;;;;o means output
(defmacro wasabio ((emit iterator) &body body)
  (let ((next (gensym))
	(place (gensym)))
    `(with-simply-bound-iterator (,next ,place ,iterator)
       (flet ((,emit (value)
		(,next)
		(setf ,place value)))
	 ,@body))))

;;;i means input
(defmacro wasabii ((deref iterator) &body body)
  (let ((next (gensym))
	(place (gensym)))
    `(with-simply-bound-iterator (,next ,place ,iterator)
       (flet ((,deref ()
		(,next)
		,place))
	 ,@body))))

(defmacro wasabiis ((&rest wasabi-pears) &body body)
  (let ((fin (cons 'progn body)))
    (dolist (pear wasabi-pears)
      (setf fin (list fin))
      (push pear fin)
      (push 'wasabii fin))
    fin))

(defmacro wasabios ((&rest wasabi-pears) &body body)
  (let ((fin (cons 'progn body)))
    (dolist (pear wasabi-pears)
      (setf fin (list fin))
      (push pear fin)
      (push 'wasabio fin))
    fin))

(defmacro deach (func-or-macro &rest forms)
  (cons 'progn
	(mapcar (lambda (x) (list func-or-macro x)) forms)))

(defun reset-iterator (iterator)
  (flhat:relocate-iterator iterator 0))

(defparameter susie (flhat:make-flhat))
(defun reset-susie ()
  (setf susie (flhat:make-flhat)))

(defparameter george (flhat:make-flhat))
(defparameter pauline (flhat:make-flhat))

(defun test6 ()
  (declare (optimize (speed 3) (safety 0)))
  (let ((spine (flhat:make-flhat-iterator susie)))
    (declare (type iter-ator:iter-ator spine))
    (dotimes (x 1)
      (reset-iterator spine)
      (wasabiis ((next spine))
	(dotimes (x (* 50))
	  (print (next)))))))

(defun test69 ()
  (declare (optimize (speed 3) (safety 0)))
  (let ((spine (flhat:make-flhat-iterator susie))
	(spine2 (flhat:make-flhat-iterator george))
	(spine3 (flhat:make-flhat-iterator pauline)))
    (declare (type iter-ator:iter-ator spine spine2 spine3))
    (dotimes (x 25)
      (deach reset-iterator spine spine2 spine3)
      (wasabios ((emit spine)
		 (emit2 spine2)
		 (emit3 spine3))
	(dotimes (x (floor (expt 10 7) 3))
	  (emit x)
	  (emit2 x)
	  (emit3 x))))))
