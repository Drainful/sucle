(defun erase-bottom ()
  (dobox ((x 0 128) (y 0 64) (z -128 0))
	 (plain-setblock x y z 0 0)))
(defun scramblehash (hash)
  (let ((keys (make-array 0 :adjustable t :fill-pointer 0))
	(values (make-array 0 :adjustable t :fill-pointer 0)))
    (maphash (lambda (k v) (vector-push-extend k keys) (vector-push-extend v values)) hash)
    (let ((tot (length keys)))
      (dotimes (x (* tot 10))
	(flet ((swap (a b vector)
		 (rotatef (aref vector a) (aref vector b))))
	  (swap (random tot) (random tot) keys))))
    (dotimes (x (length keys))
      (setf (gethash (vector-pop keys) hash) (vector-pop values)))))
(defun remove-empty-chunks ()
  (maphash (lambda (k v)
	     (when (all-zeroes-p v)
	       (remhash k world:chunkhash)))
	   world:chunkhash))

(defun wtf-increment ()
  (maphash (lambda (k v)
	     (nreverse v))
	   world:chunkhash))

(defun wtf-reverse ()
  (maphash (lambda (k v)
	     (map-into v #'1+ v))
	   world:chunkhash))

(defun wtf-reverse ()
  (maphash (lambda (k v)
	     (map-into v (lambda (x y) (max x y)) v (reverse v)))
	   world:chunkhash))

(defun wtf-reverse ()
  (maphash (lambda (k v)
	     (map-into v (lambda (x) (if (= 1 x) 0 x)) v ))
	   world:chunkhash))

(defun wtf-fill ()
  (maphash (lambda (k v)
	     (fill v 1))
	   world:chunkhash))

(defun wtf-squared ()
  (maphash (lambda (k v)
	     (map-into v (lambda (x)
			   (let ((ans (mod (* x 2) 95)))
			     (if (aref mc-blocks::renderasnormalblock ans)
				 ans
				 1))) v))
	   world:chunkhash))

(defparameter height (make-array (list 128 128)))
(defparameter avg (make-array (list 128 128)))

(with-unsafe-speed
  (defun yo ()
    (let ((array height))
      (declare (type (simple-array t (128 128)) array))
      (dobox ((x 0 128)
	      (z -128 0))
	     (setf (aref array x (the fixnum (1- (- z))))
		   (floor (the fixnum
			       (+ (find-height x (the fixnum (1+ z)))
				  (find-height (the fixnum (1+ x)) z)
				  (find-height x (the fixnum (1- z)))
				  (find-height (the fixnum (1- x)) z)))
			  4))))))

(declaim (ftype (function (fixnum fixnum) fixnum) find-height))
(defun find-height (x y)
  (loop for i downfrom 256 to 0 do
       (let ((block (world:getblock x i y)))
	 (unless (zerop block)
	   (return-from find-height i))))
  0)

(defun all-zeroes-p (sequence)
  (dotimes (x (length sequence))
    (unless (zerop (aref sequence x))
      (return-from all-zeroes-p nil)))
  t)
(defun simple-relight ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:getblock x y z)))
					;(unless (zerop blockid))
	   (let ((light (aref mc-blocks::lightvalue blockid)))
	     (if (zerop light)
		 (plain-setblock x y z blockid light 0)
		 (setblock-with-update x y z blockid light)))))
  (dobox ((x 0 128)
	  (y 128 129)
	  (z -128 0))
	 (sky-light-node x y z))
  (dobox ((x 0 128)
	  (y 128 129)
	  (z -128 0))
	 (light-node x y z)))

(defun avger ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))

	 (let ((h (aref height x (1- (- z)))))
	   (if (> y h)
	       (plain-setblock x y z 0 15 0)
	       (if (and (> h y) (zerop (world:getblock x y z)))
		   (plain-setblock x y z 1 0 0)))))
  )

(defun cactglow ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (unless (zerop (world:getblock x y z))
	   (plain-setblock x y z 1 0)))
  )

(defun trees ()
  (dobox ((x (+ 8 0) (- 128 8))
	  (z (+ 8 -128) (- 0 8)))

	 (let ((h (find-height x z)))
	   (when (zerop (random 100))
	     (when (= 2 (world:getblock x h z))
	       (tree x (1+ h) z)))))
  )

(defun cacti ()
  (dobox ((x (+ 8 0) (- 128 8))
	  (z (+ 8 -128) (- 0 8)))

	 (let ((h (find-height x z)))
	   (when (zerop (random 400))
	     (when (= 12 (world:getblock x h z))
	       (cactus x (1+ h) z)))))
  )

(defun gravel ()
  (dobox ((x (+ 8 0) (- 128 8))
	  (z (+ 8 -128) (- 0 8))
	  (y 0 20))
	 (let ((block (world:getblock x y z)))
	   (when (or (= 18 block ) (= 17 block))
	     (plain-setblock x y z 13 0 0))))
  )


(defun fill-bottom ()
  (dobox ((x 0 128)
	  (y 0 4)
	  (z -128 0))
	 (plain-setblock x y z 1 0 0)))

(defun bone?r ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:getblock x y z)))
	   (unless (zerop blockid)
	     (when (> 3 (neighbors x y z))
	       (plain-setblock x y z 0 0 0))))))
(defun bonder ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:getblock x y z)))
	   (unless (zerop blockid))
	   (when (< 3 (neighbors x y z))
	     (plain-setblock x y z 1 0 0)))))

(defun bonder ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:getblock x y z)))
	   (unless (zerop blockid)
	     (let ((naybs (neighbors x y z)))
	       (when (> 3 naybs)
		 
		 (plain-setblock x y z 0 0 0)))))))

(defun trees2 ()
  (dobox ((x (+ 8 0) (- 128 8))
	  (y 0 120)
	  (z (+ 8 -128) (- 0 8)))
	 (when (zerop (random 100))
	   (when (= 2 (world:getblock x y z))
	     (tree x (1+ y) z)))))

(defun what? ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:getblock x y z)))
	   (setblock-with-update x y z blockid 0))))

(defun what? ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:getblock x y z)))
	   (if (= 49 blockid )
	       (setblock-with-update x y z (random 95) 0)))))

(defun dirt-sand ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:getblock x y z)))
	   (case blockid
	     (2 (setblock-with-update x y z 12 0))
	     (3 (setblock-with-update x y z 24 0))))))


(defun clcok? ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:skygetlight x y z)))
	   (when 
	     (< blockid 15)
	     (plain-setblock x y z 1 0)))))
(defun clcok3 ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:skygetlight x y z)))
	   (when 
	     (= blockid 14)
	     (plain-setblock x y z 14 15)))))

(defun grassify ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:getblock x y z)))
	   (when (= blockid 3)
	     (let ((idabove (world:getblock x (1+ y) z)))
	       (when (zerop idabove)
		 (plain-setblock x y z 2 0)))))))

(defun dirts ()
  (dobox ((x 0 128)
	  (y 0 128)
	  (z -128 0))
	 (let ((blockid (world:getblock x y z)))
	   (when (= blockid 1)
	     (when (or (zerop (world:getblock x (+ 2 y) z))
		       (zerop (world:getblock x (+ 3 y) z)))
	       (plain-setblock x y z 3 0))))))

(defun testigan ()
  (dirt-sand)
  (dirts)
  (grassify)
  (trees2)
  (simple-relight))
(defun testicle ()
  (dotimes (x 1)
    (sandbox::edge-bench)
    (sandbox::corner-obsidian)
    (sandbox::clearblock? 49)
    (sandbox::clearblock? 58)
    (dotimes (x 3) (sandbox::bonder
		    )))) 
